


import org.biojava.nbio.sequencing.io.fastq

import java.io.IOException
import java.io.InputStream
import java.net.URL

/**
 * Unit test for IlluminaFastqReader.
 */
class  IlluminaFastqReaderTest  extends AbstractFastqReaderTest
{

	override def  createFastq() = 
	{
		new FastqBuilder()
			.withDescription("description")
			.withSequence("sequence")
			.withQsuality("quality_")
			.withVariant(FastqVariant.FASTQ_ILLUMINA)
			.build()
	}
}

	@Override
	public FastqReader createFastqReader()
	{
		return new IlluminaFastqReader();
	}

	@Override
	public FastqWriter createFastqWriter()
	{
		return new IlluminaFastqWriter();
	}

	public void testValidateDescription() throws Exception
	{
		IlluminaFastqReader reader = new IlluminaFastqReader();
		URL invalidDescription = getClass().getResource("illumina-invalid-description.fastq");
		try
		{
			reader.read(invalidDescription);
			fail("read(invalidDescription) expected IOException");
		}
		catch (IOException e)
		{
			assertTrue(e.getMessage().contains("description must begin with a '@' character"));
		}
	}

	public void testValidateRepeatDescription() throws Exception
	{
		IlluminaFastqReader reader = new IlluminaFastqReader();
		URL invalidRepeatDescription = getClass().getResource("illumina-invalid-repeat-description.fastq");
		try
		{
			reader.read(invalidRepeatDescription);
			fail("read(invalidRepeatDescription) expected IOException");
		}
		catch (IOException e)
		{
			assertTrue(e.getMessage().contains("repeat description must match description"));
		}
	}

	public void testWrappingAsIllumina() throws Exception
	{
		FastqReader reader = createFastqReader();
		InputStream inputStream = getClass().getResourceAsStream("wrapping_as_illumina.fastq");
		Iterable<Fastq> iterable = reader.read(inputStream);
		assertNotNull(iterable);
		int count = 0;
		for (Fastq f : iterable)
		{
			assertNotNull(f);
			count++;
		}
		assertEquals(3, count);
		inputStream.close();
	}

	public void testFullRangeAsIllumina() throws Exception
	{
		FastqReader reader = createFastqReader();
		InputStream inputStream = getClass().getResourceAsStream("illumina_full_range_as_illumina.fastq");
		Iterable<Fastq> iterable = reader.read(inputStream);
		assertNotNull(iterable);
		int count = 0;
		for (Fastq f : iterable)
		{
			assertNotNull(f);
			count++;
		}
		assertEquals(2, count);
		inputStream.close();
	}

	public void testMiscDnaAsIllumina() throws Exception
	{
		FastqReader reader = createFastqReader();
		InputStream inputStream = getClass().getResourceAsStream("misc_dna_as_illumina.fastq");
		Iterable<Fastq> iterable = reader.read(inputStream);
		assertNotNull(iterable);
		int count = 0;
		for (Fastq f : iterable)
		{
			assertNotNull(f);
			count++;
		}
		assertEquals(4, count);
		inputStream.close();
	}

	public void testMiscRnaAsIllumina() throws Exception
	{
		FastqReader reader = createFastqReader();
		InputStream inputStream = getClass().getResourceAsStream("misc_rna_as_illumina.fastq");
		Iterable<Fastq> iterable = reader.read(inputStream);
		assertNotNull(iterable);
		int count = 0;
		for (Fastq f : iterable)
		{
			assertNotNull(f);
			count++;
		}
		assertEquals(4, count);
		inputStream.close();
	}

	public void testLongReadsAsIllumina() throws Exception
	{
		FastqReader reader = createFastqReader();
		InputStream inputStream = getClass().getResourceAsStream("longreads_as_illumina.fastq");
		Iterable<Fastq> iterable = reader.read(inputStream);
		assertNotNull(iterable);
		int count = 0;
		for (Fastq f : iterable)
		{
			assertNotNull(f);
			count++;
		}
		assertEquals(10, count);
		inputStream.close();
	}
}
